[General]
network = TsnLinearNetwork

# client applications
*.client.numApps = 2
*.client.app[*].typename = "UdpSourceApp"
#*.client.app[0].source.packetNameFormat = "%M->server:CDT0-%c"
#*.client.app[1].source.packetNameFormat = "%M->server:CDT1-%c"
*.client.app[0].display-name = "f0"
*.client.app[1].display-name = "f1"
*.client.app[*].io.destAddress = "server"
*.client.app[0].io.destPort = 1000
*.client.app[1].io.destPort = 1001
*.client.app[*].source.packetLength = 175B
*.client.app[0].source.productionInterval = 500us
*.client.app[1].source.productionInterval = 500us

# server applications
*.server.numApps = 2
*.server.app[*].typename = "UdpSinkApp"
*.server.app[0].io.localPort = 1000
*.server.app[1].io.localPort = 1001

#####################
# Clock Configuration

# clocks have a random constant drift in all network nodes
#*.*.hasTimeSynchronization = true
#**.oscillator.typename = "ConstantDriftOscillator"
#**.oscillator.driftRate = uniform(-100ppm, 100ppm)

# TSN #clock gPTP master ports
#*.clock.gptp.masterPorts = ["eth0"]

# TSN switch gPTP bridge master ports
#*.switch.gptp.masterPorts = ["eth1", "eth2"]

# application traffic sources use the local clock of the network node 
#*.*.app[*].source.clockModule = "^.^.clock"

# periodic gates in all traffic shapers use the local clock of the network node 
#*.*.eth[*].macLayer.queue.transmissionGate[*].clockModule = "^.^.^.^.clock"

######## enable outgoing TSN streams #######Coding
# enable outgoing streams
*.client.hasOutgoingStreams = true
#####   client identification and encoding
# client stream identification
*.client.bridging.streamIdentifier.identifier.mapping = [{stream: "f0", packetFilter: expr(udp.destPort == 1000)},
                                                         {stream: "f1", packetFilter: expr(udp.destPort == 1001)}]

# client stream encoding
*.client.bridging.streamCoder.encoder.mapping = [{stream: "f0", pcp: 6}]
*.client.bridging.streamCoder.encoder.mapping = [{stream: "f1", pcp: 6}]
#####   switch decoding
# stream decoding   #### 
*.switch.bridging.streamCoder.decoder.mapping = [{pcp: 6, stream: "f0",source:"client"},
                                                 {pcp: 7, stream: "f1",source:"client"}]
*.switch.bridging.streamCoder.encoder.mapping = [{pcp: 6, stream: "f0"},
                                                 {pcp: 7, stream: "f1"}]

*.*Switch.bridging.streamFilter.ingress.numStreams = 2
*.*Switch.bridging.streamFilter.ingress.classifier.mapping = {"f0":0,
                                                              "f1":1 }

######### PSFP ##########
# enable ingress per-stream filtering
*.switch.hasIngressTrafficFiltering = true

# per-stream filtering
*.*Switch.bridging.streamFilter.ingress.numStreams = 2
*.*Switch.bridging.streamFilter.ingress.classifier.mapping = {"f0": 0, "f1":1 }
*.switch.bridging.streamFilter.ingress.meter[*].typename = "SingleRateTwoColorMeter"
*.switch.bridging.streamFilter.ingress.meter[0].display-name = "f0"
*.switch.bridging.streamFilter.ingress.meter[1].display-name = "f1"
*.switch.bridging.streamFilter.ingress.meter[*].committedInformationRate = 2.8Mbps
*.switch.bridging.streamFilter.ingress.meter[*].committedBurstSize = 10kB

######### egress traffic shaping ########
# enable egress traffic shaping
*.switch.hasEgressTrafficShaping = true

# time-aware traffic shaping

*.switch.eth[*].macLayer.queue.*[6].display-name = "single"
*.switch.eth[*].macLayer.queue.*[7].display-name = "double"

# control gates open or close
*.switch.eth[*].macLayer.queue.transmissionGate[6].offset = 0ms
*.switch.eth[*].macLayer.queue.transmissionGate[7].offset = 1ms
*.switch.eth[*].macLayer.queue.transmissionGate[6].durations = [1ms, 1ms]
*.switch.eth[*].macLayer.queue.transmissionGate[7].durations = [1ms, 1ms]

*.visualizer.gateVisualizer.displayGates = true
*.visualizer.gateVisualizer.displayDuration = 100us
*.visualizer.gateVisualizer.gateFilter = "**.eth[0].**"
*.visualizer.gateVisualizer.height = 16
